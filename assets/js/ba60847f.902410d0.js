"use strict";(self.webpackChunkdevops_automation_site=self.webpackChunkdevops_automation_site||[]).push([[6557],{7640:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"modulo-03-Criando-workflow/jobs","title":"Jobs: Paralelo vs Sequencial","description":"Introdu\xe7\xe3o","source":"@site/curso-github-actions-udemy/modulo-03-Criando-workflow/05-Jobs-Paralelo-vs-Sequencial.md","sourceDirName":"modulo-03-Criando-workflow","slug":"/modulo-03-Criando-workflow/jobs","permalink":"/udemy/github-actions-automacao/modulo-03-Criando-workflow/jobs","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"jobs","title":"Jobs: Paralelo vs Sequencial"},"sidebar":"tutorialSidebar","previous":{"title":"Workflow B\xe1sico no GitHub Actions","permalink":"/udemy/github-actions-automacao/modulo-03-Criando-workflow/workflow-basico"},"next":{"title":"Github Token","permalink":"/udemy/github-actions-automacao/modulo-04-security/github-token"}}');var i=n(4848),s=n(8453);const r={id:"jobs",title:"Jobs: Paralelo vs Sequencial"},d="Jobs: Paralelo vs Sequencial",l={},c=[{value:"Introdu\xe7\xe3o",id:"introdu\xe7\xe3o",level:2},{value:"Defini\xe7\xe3o",id:"defini\xe7\xe3o",level:2},{value:"Explica\xe7\xe3o T\xe9cnica",id:"explica\xe7\xe3o-t\xe9cnica",level:2},{value:"Exemplo Pr\xe1tico",id:"exemplo-pr\xe1tico",level:2},{value:"Conclus\xe3o",id:"conclus\xe3o",level:2}];function t(e){const o={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.header,{children:(0,i.jsx)(o.h1,{id:"jobs-paralelo-vs-sequencial",children:"Jobs: Paralelo vs Sequencial"})}),"\n",(0,i.jsx)(o.h2,{id:"introdu\xe7\xe3o",children:"Introdu\xe7\xe3o"}),"\n",(0,i.jsxs)(o.p,{children:["Entender como jobs s\xe3o executados (paralelo por padr\xe3o ou sequencial mediante depend\xeancias) \xe9 essencial para otimizar tempo de execu\xe7\xe3o, garantir ordem l\xf3gica de valida\xe7\xf5es e reduzir custo. Esta aula apresenta o comportamento padr\xe3o, como controlar a ordem com ",(0,i.jsx)(o.code,{children:"needs"}),", padr\xf5es de encadeamento e considera\xe7\xf5es de desempenho e confiabilidade."]}),"\n",(0,i.jsx)(o.h2,{id:"defini\xe7\xe3o",children:"Defini\xe7\xe3o"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsx)(o.li,{children:"Job: unidade de execu\xe7\xe3o isolada dentro de um workflow, roda em seu pr\xf3prio runner (m\xe1quina ef\xeamera) com ambiente independente."}),"\n",(0,i.jsxs)(o.li,{children:["Paralelo (padr\xe3o): m\xfaltiplos jobs definidos no mesmo n\xedvel em ",(0,i.jsx)(o.code,{children:"jobs:"})," come\xe7am assim que seus requisitos impl\xedcitos (nenhum, se n\xe3o h\xe1 ",(0,i.jsx)(o.code,{children:"needs"}),") s\xe3o atendidos."]}),"\n",(0,i.jsxs)(o.li,{children:["Sequencial: ordena\xe7\xe3o expl\xedcita criada adicionando ",(0,i.jsx)(o.code,{children:"needs: <job_anterior>"})," (ou lista) indicando depend\xeancia; um job s\xf3 inicia quando todos os jobs referenciados conclu\xedram com sucesso."]}),"\n"]}),"\n",(0,i.jsx)(o.h2,{id:"explica\xe7\xe3o-t\xe9cnica",children:"Explica\xe7\xe3o T\xe9cnica"}),"\n",(0,i.jsxs)(o.p,{children:["Por padr\xe3o cada job declarado sem ",(0,i.jsx)(o.code,{children:"needs"})," inicia independentemente ap\xf3s o parsing do workflow. Isso utiliza runners separados, permitindo paraleliza\xe7\xe3o horizontal (reduz tempo total quando n\xe3o h\xe1 acoplamento). Quando existe rela\xe7\xe3o l\xf3gica (ex: testes antes de build de artefato ou build antes de deploy), usa-se ",(0,i.jsx)(o.code,{children:"needs"})," para impor sequ\xeancia."]}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.code,{children:"needs"})," aceita:"]}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:["Um \xfanico identificador: ",(0,i.jsx)(o.code,{children:"needs: testes"})]}),"\n",(0,i.jsxs)(o.li,{children:["Lista: ",(0,i.jsx)(o.code,{children:"needs: [lint, testes]"})]}),"\n"]}),"\n",(0,i.jsx)(o.p,{children:"Falha em algum job requerido impede execu\xe7\xe3o dos dependentes (estado \u201cskipped\u201d). Isso implementa curto-circuito de qualidade."}),"\n",(0,i.jsx)(o.p,{children:"Encadeamentos comuns:"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsx)(o.li,{children:"Fan-out: um job inicial gera base (ex: preparar depend\xeancias) e v\xe1rios jobs paralelos o consomem."}),"\n",(0,i.jsx)(o.li,{children:"Fan-in: m\xfaltiplos jobs paralelos produzem resultados que convergem em um agregador final (ex: job de merge de cobertura ou empacotamento \xfanico)."}),"\n"]}),"\n",(0,i.jsx)(o.p,{children:"Boas pr\xe1ticas ao modelar:"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsx)(o.li,{children:"Evitar sequ\xeancia artificial quando n\xe3o h\xe1 real depend\xeancia (reduz desperd\xedcio de tempo)."}),"\n",(0,i.jsx)(o.li,{children:"Agrupar responsabilidades coesas dentro de um job para diminuir overhead de inicializa\xe7\xe3o, mas n\xe3o inflar demais (logs dif\xedceis de ler, impossibilidade de paralelizar depois)."}),"\n",(0,i.jsxs)(o.li,{children:["Empregar nomes curtos e descritivos (",(0,i.jsx)(o.code,{children:"lint"}),", ",(0,i.jsx)(o.code,{children:"testes"}),", ",(0,i.jsx)(o.code,{children:"build"}),", ",(0,i.jsx)(o.code,{children:"publicar"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(o.p,{children:["Compartilhamento de artefatos exige depend\xeancia l\xf3gica: um job s\xf3 acessa artefato enviado por outro ap\xf3s upload conclu\xeddo. Encadeamento com ",(0,i.jsx)(o.code,{children:"needs"})," garante ordem."]}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.code,{children:"matrix"})," amplia paraleliza\xe7\xe3o dentro de um \xfanico job (v\xe1rias varia\xe7\xf5es de ambiente), enquanto m\xfaltiplos jobs ampliam paraleliza\xe7\xe3o estrutural entre fases. Ambos podem coexistir (ex: job ",(0,i.jsx)(o.code,{children:"testes"})," com ",(0,i.jsx)(o.code,{children:"strategy.matrix"})," seguido por job ",(0,i.jsx)(o.code,{children:"agregar"})," que faz fan-in dos resultados)."]}),"\n",(0,i.jsx)(o.p,{children:"Considera\xe7\xf5es de performance:"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsx)(o.li,{children:"Paralelizar reduz tempo cr\xedtico de feedback (CI), mas aumenta consumo de minutos (caso de runners hospedados). Equilibrar tempo x custo."}),"\n",(0,i.jsx)(o.li,{children:"Jobs muito curtos (segundos) podem sofrer mais overhead de provisionamento que ganho real \u2014 avaliar jun\xe7\xe3o."}),"\n",(0,i.jsxs)(o.li,{children:["Sequ\xeancia for\xe7ada em cadeia longa (",(0,i.jsx)(o.code,{children:"A -> B -> C -> D"}),") pode virar gargalo; avaliar fan-out/fan-in."]}),"\n"]}),"\n",(0,i.jsx)(o.p,{children:"Confiabilidade:"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsx)(o.li,{children:"Depend\xeancia profunda amplia impacto de uma falha inicial."}),"\n",(0,i.jsx)(o.li,{children:"Uso exagerado de fan-in pode criar job final cr\xedtico gigante (risco \xfanico). Dividir agrega\xe7\xf5es quando poss\xedvel."}),"\n"]}),"\n",(0,i.jsx)(o.p,{children:"Limites / aten\xe7\xe3o:"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsx)(o.li,{children:"N\xfamero m\xe1ximo de jobs simult\xe2neos varia por plano (consultar quotas atuais)."}),"\n",(0,i.jsx)(o.li,{children:"Depend\xeancias circulares n\xe3o s\xe3o permitidas (erro de valida\xe7\xe3o)."}),"\n"]}),"\n",(0,i.jsx)(o.h2,{id:"exemplo-pr\xe1tico",children:"Exemplo Pr\xe1tico"}),"\n",(0,i.jsx)(o.p,{children:"Fluxo com paraleliza\xe7\xe3o inicial e converg\xeancia final:"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-yaml",children:'name: Jobs Paralelo vs Sequencial\non: [push]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Lint\n        run: echo "Lint OK"\n\n  testes:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Testes\n        run: echo "Testes OK"\n\n  build:\n    needs: [lint, testes]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Build\n        run: echo "Build executado"\n\n  publicar:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Publicar (simulado)\n        run: echo "Publica\xe7\xe3o conclu\xedda"\n'})}),"\n",(0,i.jsx)(o.p,{children:"Comportamento:"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"lint"})," e ",(0,i.jsx)(o.code,{children:"testes"})," iniciam em paralelo."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"build"})," aguarda ambos conclu\xedrem."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"publicar"})," s\xf3 executa se ",(0,i.jsx)(o.code,{children:"build"})," tiver sucesso."]}),"\n"]}),"\n",(0,i.jsx)(o.h2,{id:"conclus\xe3o",children:"Conclus\xe3o"}),"\n",(0,i.jsxs)(o.p,{children:["Jobs executam em paralelo por padr\xe3o, e a introdu\xe7\xe3o de ",(0,i.jsx)(o.code,{children:"needs"})," fornece mecanismo declarativo para impor ordem e controlar depend\xeancias expl\xedcitas. O desenho correto equilibra feedback r\xe1pido (paraleliza\xe7\xe3o) e integridade l\xf3gica (sequ\xeancia). Esta base permite avan\xe7ar para t\xf3picos como fan-out com matriz, agrega\xe7\xe3o de artefatos e otimiza\xe7\xe3o de tempo total de pipeline. Se desejar aprofundar em modelagem de fan-in/fan-out avan\xe7ado ou matriz combinat\xf3ria, indique para calibrarmos a pr\xf3xima aula."]})]})}function u(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>d});var a=n(6540);const i={},s=a.createContext(i);function r(e){const o=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:o},e.children)}}}]);