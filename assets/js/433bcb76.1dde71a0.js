"use strict";(self.webpackChunkdevops_automation_site=self.webpackChunkdevops_automation_site||[]).push([[239],{1806:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"modulo-02-Introducao-Github-Actions/componentes","title":"Componentes do GitHub Actions","description":"Introdu\xe7\xe3o","source":"@site/curso-github-actions-udemy/modulo-02-Introducao-Github-Actions/02-Componentes-GitHub-Actions.md","sourceDirName":"modulo-02-Introducao-Github-Actions","slug":"/modulo-02-Introducao-Github-Actions/componentes","permalink":"/udemy/github-actions-automacao/modulo-02-Introducao-Github-Actions/componentes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"componentes","title":"Componentes do GitHub Actions"},"sidebar":"tutorialSidebar","previous":{"title":"O que \xe9 GitHub Actions?","permalink":"/udemy/github-actions-automacao/modulo-02-Introducao-Github-Actions/github-actions"},"next":{"title":"Arquitetura e Funcionamento do GitHub Actions","permalink":"/udemy/github-actions-automacao/modulo-02-Introducao-Github-Actions/arquitetura"}}');var t=s(4848),i=s(8453);const a={id:"componentes",title:"Componentes do GitHub Actions"},r="Componentes do GitHub Actions",c={},u=[{value:"Introdu\xe7\xe3o",id:"introdu\xe7\xe3o",level:2},{value:"Defini\xe7\xe3o",id:"defini\xe7\xe3o",level:2},{value:"Explica\xe7\xe3o T\xe9cnica",id:"explica\xe7\xe3o-t\xe9cnica",level:2},{value:"1. Workflows",id:"1-workflows",level:3},{value:"2. Events",id:"2-events",level:3},{value:"3. Jobs",id:"3-jobs",level:3},{value:"4. Steps",id:"4-steps",level:3},{value:"5. Actions",id:"5-actions",level:3},{value:"6. Runners",id:"6-runners",level:3},{value:"Exemplo Pr\xe1tico",id:"exemplo-pr\xe1tico",level:2},{value:"Output Esperado",id:"output-esperado",level:2},{value:"Conclus\xe3o",id:"conclus\xe3o",level:2}];function l(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"componentes-do-github-actions",children:"Componentes do GitHub Actions"})}),"\n",(0,t.jsx)(e.h2,{id:"introdu\xe7\xe3o",children:"Introdu\xe7\xe3o"}),"\n",(0,t.jsx)(e.p,{children:"Para dominar o GitHub Actions, \xe9 essencial compreender seus componentes fundamentais. Cada elemento trabalha em harmonia para criar um sistema robusto de automa\xe7\xe3o. Esta estrutura modular permite construir desde simples verifica\xe7\xf5es at\xe9 complexos pipelines de deployment."}),"\n",(0,t.jsx)(e.h2,{id:"defini\xe7\xe3o",children:"Defini\xe7\xe3o"}),"\n",(0,t.jsx)(e.p,{children:"Os componentes do GitHub Actions formam uma arquitetura hier\xe1rquica onde cada elemento tem responsabilidades espec\xedficas:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Workflows"}),": Orquestram todo o processo"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Events"}),": Definem quando executar"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Jobs"}),": Organizam o trabalho"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Steps"}),": Executam as tarefas"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Actions"}),": Reutilizam funcionalidades"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Runners"}),": Fornecem o ambiente de execu\xe7\xe3o"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"explica\xe7\xe3o-t\xe9cnica",children:"Explica\xe7\xe3o T\xe9cnica"}),"\n",(0,t.jsx)(e.h3,{id:"1-workflows",children:"1. Workflows"}),"\n",(0,t.jsxs)(e.p,{children:["Processos automatizados definidos em arquivos YAML na pasta ",(0,t.jsx)(e.code,{children:".github/workflows/"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"name: Complete CI/CD Pipeline\non:\n  push:\n    branches: [ main ]\n  schedule:\n    - cron: '0 2 * * 1'  # Segunda-feira \xe0s 2h\n    \nenv:\n  JAVA_VERSION: '17'\n  \njobs:\n  test:\n    # Job de teste\n  build:\n    # Job de build\n  deploy:\n    # Job de deploy\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-events",children:"2. Events"}),"\n",(0,t.jsx)(e.p,{children:"Eventos que acionam workflows automaticamente:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"on:\n  # Push em branches espec\xedficas\n  push:\n    branches: [ main, develop ]\n    paths: [ 'src/**', 'pom.xml' ]\n    \n  # Pull requests\n  pull_request:\n    branches: [ main ]\n    types: [ opened, synchronize, reopened ]\n    \n  # Agendamento (cron)\n  schedule:\n    - cron: '30 5 * * 1-5'  # Dias \xfateis \xe0s 5:30\n    \n  # Trigger manual\n  workflow_dispatch:\n    inputs:\n      environment:\n        description: 'Ambiente de deploy'\n        required: true\n        default: 'staging'\n        type: choice\n        options: ['staging', 'production']\n        \n  # Cria\xe7\xe3o de release\n  release:\n    types: [ published ]\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-jobs",children:"3. Jobs"}),"\n",(0,t.jsx)(e.p,{children:"Conjunto de steps que executam no mesmo runner:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"jobs:\n  test:\n    name: 'Testes Unit\xe1rios'\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        java-version: [ 11, 17, 21 ]\n    \n    steps:\n    - name: Checkout\n      uses: actions/checkout@v4\n      \n    - name: Setup Java ${{ matrix.java-version }}\n      uses: actions/setup-java@v4\n      with:\n        java-version: ${{ matrix.java-version }}\n        distribution: 'corretto'\n        \n  build:\n    name: 'Build da Aplica\xe7\xe3o'\n    needs: test  # Depend\xeancia entre jobs\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'  # Condicional\n    \n    outputs:\n      artifact-name: ${{ steps.build.outputs.artifact }}\n      \n    steps:\n    - name: Build\n      id: build\n      run: |\n        ./mvnw clean package\n        echo \"artifact=devops-api-$(date +%Y%m%d).jar\" >> $GITHUB_OUTPUT\n"})}),"\n",(0,t.jsx)(e.h3,{id:"4-steps",children:"4. Steps"}),"\n",(0,t.jsx)(e.p,{children:"A\xe7\xf5es individuais executadas sequencialmente:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"steps:\n  # Step usando action pr\xe9-constru\xedda\n  - name: Checkout Repository\n    uses: actions/checkout@v4\n    with:\n      fetch-depth: 0\n      \n  # Step com comando personalizado\n  - name: Cache Dependencies\n    uses: actions/cache@v4\n    with:\n      path: ~/.m2\n      key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n      restore-keys: |\n        ${{ runner.os }}-maven-\n        \n  # Step com script customizado\n  - name: Run Custom Script\n    run: |\n      echo \"Iniciando build...\"\n      chmod +x ./scripts/build.sh\n      ./scripts/build.sh\n      echo \"Build conclu\xeddo!\"\n      \n  # Step condicional\n  - name: Deploy to Production\n    if: github.ref == 'refs/heads/main' && github.event_name == 'push'\n    run: echo \"Deploying to production...\"\n"})}),"\n",(0,t.jsx)(e.h3,{id:"5-actions",children:"5. Actions"}),"\n",(0,t.jsx)(e.p,{children:"Aplica\xe7\xf5es reutiliz\xe1veis para tarefas espec\xedficas:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"# Action do marketplace\n- name: Deploy to AWS\n  uses: aws-actions/configure-aws-credentials@v4\n  with:\n    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    aws-region: us-east-1\n\n# Action local customizada\n- name: Custom Notification\n  uses: ./.github/actions/notify-teams\n  with:\n    webhook-url: ${{ secrets.TEAMS_WEBHOOK }}\n    message: 'Deploy conclu\xeddo com sucesso!'\n\n# Action composta (composite)\n- name: Setup Build Environment\n  uses: ./.github/actions/setup-build\n  with:\n    java-version: '17'\n    node-version: '18'\n"})}),"\n",(0,t.jsx)(e.h3,{id:"6-runners",children:"6. Runners"}),"\n",(0,t.jsx)(e.p,{children:"M\xe1quinas virtuais que executam os workflows:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"jobs:\n  # Runner GitHub-hosted\n  ubuntu-job:\n    runs-on: ubuntu-latest  # ubuntu-20.04, ubuntu-22.04\n    \n  windows-job:\n    runs-on: windows-latest  # windows-2019, windows-2022\n    \n  macos-job:\n    runs-on: macos-latest   # macos-11, macos-12\n    \n  # Self-hosted runner\n  custom-job:\n    runs-on: [ self-hosted, linux, x64 ]\n    \n  # Runner com container\n  container-job:\n    runs-on: ubuntu-latest\n    container:\n      image: amazoncorretto:17\n      options: --user root\n"})}),"\n",(0,t.jsx)(e.h2,{id:"exemplo-pr\xe1tico",children:"Exemplo Pr\xe1tico"}),"\n",(0,t.jsx)(e.p,{children:"Workflow completo integrando todos os componentes:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"name: Spring Boot CI/CD Complete\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  test:\n    name: 'Testes e Qualidade'\n    runs-on: ubuntu-latest\n    \n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_PASSWORD: postgres\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n    \n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Setup Java\n      uses: actions/setup-java@v4\n      with:\n        java-version: '17'\n        distribution: 'corretto'\n        \n    - name: Cache Maven\n      uses: actions/cache@v4\n      with:\n        path: ~/.m2\n        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n        \n    - name: Run Tests\n      run: ./mvnw test\n      env:\n        SPRING_PROFILES_ACTIVE: test\n        \n    - name: Generate Coverage Report\n      run: ./mvnw jacoco:report\n      \n    - name: Upload Coverage\n      uses: codecov/codecov-action@v4\n      with:\n        file: ./target/site/jacoco/jacoco.xml\n\n  build:\n    name: 'Build e Docker'\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    \n    outputs:\n      image-digest: ${{ steps.build.outputs.digest }}\n      \n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Setup Java\n      uses: actions/setup-java@v4\n      with:\n        java-version: '17'\n        distribution: 'corretto'\n        \n    - name: Build Application\n      run: ./mvnw clean package -DskipTests\n      \n    - name: Log into Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n        \n    - name: Build and Push Docker\n      id: build\n      uses: docker/build-push-action@v5\n      with:\n        context: .\n        push: true\n        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\n        \n  deploy:\n    name: 'Deploy Staging'\n    needs: build\n    runs-on: ubuntu-latest\n    environment: staging\n    \n    steps:\n    - name: Deploy to Staging\n      run: |\n        echo \"Deploying image: ${{ needs.build.outputs.image-digest }}\"\n        echo \"Deploy simulado para staging\"\n"})}),"\n",(0,t.jsx)(e.h2,{id:"output-esperado",children:"Output Esperado"}),"\n",(0,t.jsx)(e.p,{children:"Execu\xe7\xe3o do workflow acima produzir\xe1:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Job Test"}),": Testes executados com cobertura e qualidade verificada"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Job Build"}),": Aplica\xe7\xe3o compilada e imagem Docker criada"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Job Deploy"}),": Deploy autom\xe1tico para staging"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Artifacts"}),": Relat\xf3rios, logs e imagens Docker dispon\xedveis"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Feedback"}),": Status visual no GitHub com detalhes de cada step"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"conclus\xe3o",children:"Conclus\xe3o"}),"\n",(0,t.jsx)(e.p,{children:"Os componentes do GitHub Actions trabalham em conjunto para criar um ecossistema completo de automa\xe7\xe3o. Workflows orquestram, Events disparam, Jobs organizam, Steps executam, Actions reutilizam e Runners prov\xeam o ambiente. Esta arquitetura modular oferece flexibilidade m\xe1xima, permitindo desde automa\xe7\xf5es simples at\xe9 pipelines corporativos complexos."}),"\n",(0,t.jsx)(e.p,{children:"Dominar cada componente \xe9 essencial para construir solu\xe7\xf5es robustas, eficientes e maint\xedveis, aproveitando todo o potencial da plataforma GitHub Actions."})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>r});var o=s(6540);const t={},i=o.createContext(t);function a(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);