"use strict";(self.webpackChunkdevops_automation_site=self.webpackChunkdevops_automation_site||[]).push([[6011],{3552:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"modulo-01-fundamentos/ci","title":"Continuous Integration (CI)","description":"Introdu\xe7\xe3o","source":"@site/curso-github-actions-udemy/modulo-01-fundamentos/02-Continuous-Integration-CI.md","sourceDirName":"modulo-01-fundamentos","slug":"/modulo-01-fundamentos/ci","permalink":"/udemy/github-actions-automacao/modulo-01-fundamentos/ci","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"ci","title":"Continuous Integration (CI)","noindex":true},"sidebar":"tutorialSidebar","previous":{"title":"O que \xe9 DevOps?","permalink":"/udemy/github-actions-automacao/modulo-01-fundamentos/devops-intro"},"next":{"title":"Continuous Deployment (CD)","permalink":"/udemy/github-actions-automacao/modulo-01-fundamentos/cd"}}');var n=i(4848),t=i(8453);const s={id:"ci",title:"Continuous Integration (CI)",noindex:!0},r="Continuous Integration (CI)",c={},d=[{value:"Introdu\xe7\xe3o",id:"introdu\xe7\xe3o",level:2},{value:"Defini\xe7\xe3o",id:"defini\xe7\xe3o",level:2},{value:"Explica\xe7\xe3o T\xe9cnica",id:"explica\xe7\xe3o-t\xe9cnica",level:2},{value:"Exemplo Pr\xe1tico",id:"exemplo-pr\xe1tico",level:2},{value:"Conclus\xe3o",id:"conclus\xe3o",level:2}];function l(e){const a={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"continuous-integration-ci",children:"Continuous Integration (CI)"})}),"\n",(0,n.jsx)("div",{align:"center",children:(0,n.jsx)("img",{src:"/img/github-actions/ci.png",alt:"DevOps Logo",width:"800"})}),"\n",(0,n.jsx)(a.h2,{id:"introdu\xe7\xe3o",children:"Introdu\xe7\xe3o"}),"\n",(0,n.jsx)(a.p,{children:"Continuous Integration (Integra\xe7\xe3o Cont\xednua) reduz o atrito entre desenvolvimento di\xe1rio e garantia de qualidade. Ao integrar mudan\xe7as pequenas e frequentes em uma base principal, problemas de compatibilidade e regress\xf5es s\xe3o identificados cedo, antes de acumularem custo e complexidade. Integra\xe7\xe3o Cont\xednua n\xe3o \xe9 apenas rodar testes: \xe9 um mecanismo disciplinado de verifica\xe7\xe3o autom\xe1tica e consistente a cada mudan\xe7a proposta."}),"\n",(0,n.jsx)(a.h2,{id:"defini\xe7\xe3o",children:"Defini\xe7\xe3o"}),"\n",(0,n.jsx)(a.p,{children:"Integra\xe7\xe3o Cont\xednua \xe9 a pr\xe1tica de integrar c\xf3digo frequentemente (tipicamente v\xe1rias vezes ao dia) em um reposit\xf3rio compartilhado, onde cada integra\xe7\xe3o dispara um fluxo automatizado que executa valida\xe7\xf5es (processo de constru\xe7\xe3o, testes, an\xe1lise est\xe1tica, checagens de seguran\xe7a e qualidade). O objetivo \xe9 fornecer retorno r\xe1pido e confi\xe1vel sobre o impacto de cada altera\xe7\xe3o, garantindo que a base principal permane\xe7a sempre em estado potencialmente liber\xe1vel."}),"\n",(0,n.jsx)(a.h2,{id:"explica\xe7\xe3o-t\xe9cnica",children:"Explica\xe7\xe3o T\xe9cnica"}),"\n",(0,n.jsx)(a.p,{children:"A ado\xe7\xe3o efetiva de CI combina integra\xe7\xe3o frequente e verifica\xe7\xe3o automatizada disciplinada. Commits pequenos e branches curtos reduzem conflitos e tornam revis\xf5es r\xe1pidas; pull requests enxutos geram feedback cedo. O pipeline consolida a valida\xe7\xe3o em etapas previs\xedveis: prepara\xe7\xe3o (checkout e cache), build (garante integridade), testes (unidade para rapidez, integra\xe7\xe3o leve onde h\xe1 acoplamento, contratos quando h\xe1 APIs), an\xe1lise est\xe1tica (linters, seguran\xe7a), e gera\xe7\xe3o de relat\xf3rios (cobertura e m\xe9tricas) sob regras objetivas de aprova\xe7\xe3o."}),"\n",(0,n.jsx)(a.p,{children:"Fluxo t\xedpico (vis\xe3o sint\xe9tica):"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Prepara\xe7\xe3o: checkout, defini\xe7\xe3o de vers\xe3o/ferramentas, restaura\xe7\xe3o de cache."}),"\n",(0,n.jsx)(a.li,{children:"Build: compila\xe7\xe3o/empacotamento e verifica\xe7\xe3o de depend\xeancias."}),"\n",(0,n.jsx)(a.li,{children:"Testes: unidade, integra\xe7\xe3o leve, contratos/API, smoke essencial."}),"\n",(0,n.jsx)(a.li,{children:"An\xe1lise Est\xe1tica: lint, formata\xe7\xe3o, SCA (seguran\xe7a de depend\xeancias)."}),"\n",(0,n.jsx)(a.li,{children:"Relat\xf3rios: cobertura, m\xe9tricas, artefatos m\xednimos."}),"\n",(0,n.jsx)(a.li,{children:"Governan\xe7a: pol\xedticas (ex: cobertura m\xednima, proibi\xe7\xe3o de arquivos grandes no PR)."}),"\n"]}),"\n",(0,n.jsx)(a.p,{children:"Testes automatizados funcionam como rede de seguran\xe7a graduada: unidade cobre l\xf3gica central com velocidade; integra\xe7\xe3o valida intera\xe7\xf5es essenciais sem tentar replicar produ\xe7\xe3o inteira; contratos previnem quebras silenciosas; cobertura indica lacunas, n\xe3o \xe9 fim em si. Qualquer falha de teste, build ou vulnerabilidade cr\xedtica bloqueia o merge."}),"\n",(0,n.jsx)(a.p,{children:"Camadas de testes (enxutas e complementares):"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Unidade: r\xe1pida, granular e determin\xedstica."}),"\n",(0,n.jsx)(a.li,{children:"Integra\xe7\xe3o: pontos de acoplamento cr\xedticos."}),"\n",(0,n.jsx)(a.li,{children:"Contratos/API: formato e expectativas entre servi\xe7os."}),"\n",(0,n.jsx)(a.li,{children:"Smoke: verifica\xe7\xe3o m\xednima de vida do sistema."}),"\n",(0,n.jsx)(a.li,{children:"Cobertura: indicador auxiliar (onde refor\xe7ar testes)."}),"\n"]}),"\n",(0,n.jsx)(a.p,{children:"Feedback deve ser r\xe1pido o bastante para incentivar uso cont\xednuo sem sacrificar confian\xe7a. Paraleliza\xe7\xe3o de suites, cache de depend\xeancias e segrega\xe7\xe3o de verifica\xe7\xf5es mais pesadas mant\xeam tempo sob controle. Ambientes declarativos e scripts versionados eliminam o \u201cfunciona na minha m\xe1quina\u201d. Registros claros e relat\xf3rios padronizados tornam a decis\xe3o bin\xe1ria (aprovado/reprovado) transparente. O fluxo evolui por medi\xe7\xf5es: gargalos s\xe3o otimizados; testes lentos s\xe3o reclassificados; novas checagens entram gradualmente. A pr\xe1tica \xe9 um sistema vivo e iterativo."}),"\n",(0,n.jsx)(a.p,{children:"Principais alavancas de acelera\xe7\xe3o cont\xednua:"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Paraleliza\xe7\xe3o/matriz de jobs."}),"\n",(0,n.jsx)(a.li,{children:"Cache incremental (depend\xeancias, build parcial)."}),"\n",(0,n.jsx)(a.li,{children:"Sharding de suites maiores."}),"\n",(0,n.jsx)(a.li,{children:"Isolamento de testes pesados para execu\xe7\xf5es programadas."}),"\n",(0,n.jsx)(a.li,{children:"Medi\xe7\xe3o cont\xednua de dura\xe7\xe3o por est\xe1gio."}),"\n"]}),"\n",(0,n.jsx)(a.h2,{id:"exemplo-pr\xe1tico",children:"Exemplo Pr\xe1tico"}),"\n",(0,n.jsx)(a.p,{children:"Em um servi\xe7o backend t\xedpico: abrir um pull request dispara pipeline que executa lint e testes unit\xe1rios em poucos minutos. Se passar, inicia testes de integra\xe7\xe3o com banco ef\xeamero e depois an\xe1lise de depend\xeancias e cobertura. Qualquer falha bloqueia o merge com status claro e coment\xe1rio autom\xe1tico (ex: queda de cobertura). Corrigido o problema e obtido verde, revisores aprovam e a branch principal segue est\xe1vel e pronta para entrega cont\xednua. Resultado: menos regress\xf5es, rollbacks simples e ciclo ideia\u2011valida\xe7\xe3o mais curto."}),"\n",(0,n.jsx)(a.h2,{id:"conclus\xe3o",children:"Conclus\xe3o"}),"\n",(0,n.jsx)(a.p,{children:"Continuous Integration estabelece a base de confian\xe7a necess\xe1ria para entregas frequentes. Ao unir integra\xe7\xe3o de c\xf3digo em pequenos incrementos com um pipeline automatizado rigoroso, a equipe obt\xe9m feedback r\xe1pido, evita ac\xfamulo de d\xedvida oculta e mant\xe9m a linha principal liber\xe1vel. Pr\xe1ticas como testes abrangentes por\xe9m r\xe1pidos, paraleliza\xe7\xe3o, cache e crit\xe9rios claros de falha sustentam a efic\xe1cia do processo. Com CI consolidado, o caminho fica preparado para expandir em dire\xe7\xe3o a Continuous Delivery/Deployment, seguran\xe7a integrada e otimiza\xe7\xf5es de performance nos pipelines subsequentes."})]})}function u(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,a,i)=>{i.d(a,{R:()=>s,x:()=>r});var o=i(6540);const n={},t=o.createContext(n);function s(e){const a=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),o.createElement(t.Provider,{value:a},e.children)}}}]);